"""# deno_binary example

Shows how to run a TypeScript program using a deno_binary that wraps the deno tool.
"""

load("@contrib_rules_deno//deno:defs.bzl", "deno_binary")

# Local Deno dependency scripts are just loaded from the file system. This makes
# filegroup the exact behavior we would want of a deno_library rule.
filegroup(
    name = "deno_utils",
    srcs = [
        "util_bazel.ts",
        "util_permissions.ts",
    ],
)

# A deno_binary specifies a main entry point and any flags to pass to Deno on
# execution. The deps are just other scripts we want to be able to import.
deno_binary(
    name = "example",
    allow = [
        "write",
        "env",
    ],
    main = "main.ts",
    unstable_apis = True,
    deps = [
        "helper.ts",
        ":deno_utils",
    ],
)

sh_test(
    name = "example_test",
    srcs = ["example_test.sh"],
    data = [":example"],
)
