"""# genrule example

Shows how to run a JavaScript program using a simple genrule that wraps the deno tool.
"""

load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")

# Trivial test fixture: a JavaScript program that writes to a file using Deno runtime API
write_file(
    name = "source",
    out = "some.js",
    content = ["Deno.writeTextFile(Deno.args[0], 'stuff')"],
)

write_file(
    name = "write_expected",
    out = "expected",
    content = ["stuff"],
)

# You can use the deno toolchain together with a genrule().
# This gives you complete control over starting the interpreter, but you also have to
# manually handle module resolution.
genrule(
    name = "use_node_toolchain",
    srcs = ["some.js"],
    outs = ["genrule_out"],
    cmd = "$(DENO_PATH) run --allow-write $(execpath some.js) $@",
    toolchains = ["@deno1_21_toolchains//:resolved_toolchain"],
    tools = ["@deno1_21_toolchains//:resolved_toolchain"],
)

diff_test(
    name = "test_genrule",
    failure_message = "expected Deno program to write content",
    file1 = "expected",
    file2 = "genrule_out",
)
